apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.niks.aartest"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    makeApkVersioningAutoIncrement()

    giveApkProperName()
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile(name: 'test_lib', ext: 'aar')
}
repositories {
    flatDir {
        dirs 'libs'
    }
}

def makeApkVersioningAutoIncrement() {
    def versionPropsFile = file('version.properties')
    def runTasks = gradle.startParameter.taskNames
    if (versionPropsFile.canRead() && ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def fileVersionCode = versionProps['VERSION_CODE'].toInteger()
        def fileVersionName
        if (fileVersionCode <= 10) {
            fileVersionName = "1." + (fileVersionCode - 1);
        } else if (fileVersionCode >= 20 && fileVersionCode % 10 == 0) {
            fileVersionName = ((int) (fileVersionCode / 10)) + ".9";
        } else {
            fileVersionName = (1 + (int) (fileVersionCode / 10)) + "." + ((fileVersionCode % 10) - 1);
        }
        fileVersionCode++;

        versionProps['VERSION_CODE'] = fileVersionCode.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        android.defaultConfig {

            versionCode fileVersionCode
            versionName fileVersionName
            minSdkVersion 15
            targetSdkVersion 23
        }
    } else {
//        throw new GradleException("Could not read version.properties!")
    }
}

def giveApkProperName() {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "${archivesBaseName}-" + variant.versionName + "-" + output.name + ".apk"
                output.outputFile = new File(outputFile.parent, fileName)
                // def outputPathName = "E:\\apk_name.apk"
                // output.outputFile = new File(outputPathName)
            }
        }
    }
}